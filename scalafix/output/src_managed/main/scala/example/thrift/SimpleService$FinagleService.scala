/**
 * Generated by Scrooge
 *   version: 22.7.0
 *   rev: 2bb5fe76210bd2837988f9703fc9ca47d51bbe26
 *   built at: 20220728-182510
 */
package example.thrift

import com.twitter.finagle.{
  Filter => _,
  Service => _,
  thrift => _,
  _
}
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.RichServerParam
import com.twitter.io.Buf
import com.twitter.util.Future
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryInputTransport


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class SimpleService$FinagleService(
  iface: SimpleService.MethodPerEndpoint,
  serverParam: RichServerParam
) extends com.twitter.finagle.Service[Array[Byte], Array[Byte]] {
  import SimpleService._

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: SimpleService.MethodPerEndpoint,
    protocolFactory: TProtocolFactory,
    stats: StatsReceiver = NullStatsReceiver,
    maxThriftBufferSize: Int = Thrift.param.maxThriftBufferSize,
    serviceName: String = "SimpleService"
  ) = this(iface, RichServerParam(protocolFactory, serviceName, maxThriftBufferSize, stats))

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: SimpleService.MethodPerEndpoint,
    protocolFactory: TProtocolFactory,
    stats: StatsReceiver,
    maxThriftBufferSize: Int
  ) = this(iface, protocolFactory, stats, maxThriftBufferSize, "SimpleService")

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: SimpleService.MethodPerEndpoint,
    protocolFactory: TProtocolFactory
  ) = this(iface, protocolFactory, NullStatsReceiver, Thrift.param.maxThriftBufferSize)

  def serviceName: String = serverParam.serviceName
  private[this] val filters: Filter = new Filter(serverParam)

  private[this] def protocolFactory: TProtocolFactory = serverParam.restrictedProtocolFactory

  protected val serviceMap: _root_.scala.collection.mutable.HashMap[String, _root_.com.twitter.finagle.Service[(TProtocol, Int), Array[Byte]]] =
    new _root_.scala.collection.mutable.HashMap[String, _root_.com.twitter.finagle.Service[(TProtocol, Int), Array[Byte]]]()

  protected def addService(name: String, service: _root_.com.twitter.finagle.Service[(TProtocol, Int), Array[Byte]]): Unit = {
    serviceMap(name) = service
  }

  final def apply(request: Array[Byte]): Future[Array[Byte]] = {
    val iprot = protocolFactory.getProtocol(new TMemoryInputTransport(request))

    try {
      val msg = iprot.readMessageBegin()
      val svcOpt = serviceMap.get(msg.name)
      if (svcOpt.isDefined) {
        svcOpt.get.apply((iprot, msg.seqid))
      } else {
        TProtocolUtil.skip(iprot, TType.STRUCT)
        invalidMethodNameFuture(msg)
      }
    } catch {
      case e: Exception => Future.exception(e)
    }
  }

  private[this] def invalidMethodNameFuture(msg: TMessage): Future[Array[Byte]] = {
     Future.value(Buf.ByteArray.Owned.extract(
       filters.exception(msg.name, msg.seqid, TApplicationException.UNKNOWN_METHOD,
         "Invalid method name: '" + msg.name + "'")))
  }
  // ---- end boilerplate.

  addService("MakeRequest", {
    val methodService = new _root_.com.twitter.finagle.Service[MakeRequest.Args, MakeRequest.SuccessType] {
      def apply(args: MakeRequest.Args): Future[MakeRequest.SuccessType] = {
        _root_.com.twitter.finagle.thrift.ServerAnnotations.annotate("MakeRequest", "example.thrift.SimpleService#makeRequest()")
        iface.makeRequest(args.request)
      }
    }
  
    filters.makeRequest.andThen(methodService)
  })
}